import telebot
from telebot.types import Message
import time
from collections import defaultdict
from datetime import datetime

TOKEN = ''
ADMIN_USERNAME = ''

bot = telebot.TeleBot(TOKEN)

users = {}
banned_users = set()
waiting_list = []
reports = {}
chats = {} 
chat_messages = defaultdict(list)

# ==============================================
# –î–ï–ö–û–†–ê–¢–û–†–´ –ò –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================================

def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    def wrapper(message):
        username = message.from_user.username
        if not username or str(username).lower() != ADMIN_USERNAME.lower():
            bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        return func(message)
    return wrapper

def format_timestamp(timestamp):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    return datetime.fromtimestamp(timestamp).strftime('%d.%m.%Y %H:%M:%S')

# ==============================================
# –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==============================================

def send_welcome(message):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    
    if username.lower() in banned_users:
        bot.send_message(user_id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return
    
    users[user_id] = {
        "state": "none",
        "partner_id": None,
        "chat_id": None,
        "username": username
    }
    
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç.\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/find - –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/leave - –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞\n"
        "/report - –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/help - –ü–æ–º–æ—â—å"
    )

def show_help(message):
    bot.send_message(
        message.chat.id,
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/find - –ù–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/leave - –í—ã–π—Ç–∏ –∏–∑ —á–∞—Ç–∞\n"
        "/report - –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/help - –ü–æ–º–æ—â—å"
    )

def find_partner(message):
    user_id = message.from_user.id
    username = users.get(user_id, {}).get('username', str(user_id))
    
    if username.lower() in banned_users:
        bot.send_message(user_id, "üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞")
        return
    
    if user_id not in users:
        send_welcome(message)
        return
    
    if users[user_id]["state"] != "none":
        bot.send_message(message.chat.id, "‚ùå –í—ã —É–∂–µ –≤ —á–∞—Ç–µ –∏–ª–∏ –≤ –ø–æ–∏—Å–∫–µ")
        return
    
    users[user_id]["state"] = "waiting"
    waiting_list.append(user_id)
    
    bot.send_message(message.chat.id, "üîç –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
    try_find_pair()

def try_find_pair():
    while len(waiting_list) >= 2:
        user1 = waiting_list.pop(0)
        user2 = waiting_list.pop(0)
        
        if users[user1]["state"] != "waiting" or users[user2]["state"] != "waiting":
            continue
        
        chat_id = f"{user1}_{user2}_{int(time.time())}"
        chats[chat_id] = {
            "user1": user1,
            "user2": user2,
            "created_at": time.time()
        }

        users[user1].update({"state": "chatting", "partner_id": user2, "chat_id": chat_id})
        users[user2].update({"state": "chatting", "partner_id": user1, "chat_id": chat_id})

        bot.send_message(user1, f"üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! (ID —á–∞—Ç–∞: {chat_id})\n–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.")
        bot.send_message(user2, f"üí¨ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! (ID —á–∞—Ç–∞: {chat_id})\n–ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.")

def leave_chat(message):
    user_id = message.from_user.id
    
    if user_id not in users or users[user_id]["state"] == "none":
        bot.send_message(user_id, "‚ùå –í—ã –Ω–µ –≤ —á–∞—Ç–µ")
        return
    
    if users[user_id]["state"] == "waiting":
        waiting_list.remove(user_id)
        users[user_id]["state"] = "none"
        bot.send_message(user_id, "üîé –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return

    chat_id = users[user_id]["chat_id"]
    partner_id = users[user_id]["partner_id"]

    users[user_id]["state"] = "none"
    users[user_id]["partner_id"] = None
    users[user_id]["chat_id"] = None
    
    bot.send_message(user_id, "‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —á–∞—Ç–∞")

    if partner_id in users and users[partner_id]["state"] == "chatting":
        bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç")
        users[partner_id]["state"] = "none"
        users[partner_id]["partner_id"] = None
        users[partner_id]["chat_id"] = None

def report_user(message):
    user_id = message.from_user.id
    
    if user_id not in users or users[user_id]["state"] != "chatting":
        bot.send_message(user_id, "‚ùå –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")
        return
    
    partner_id = users[user_id]["partner_id"]
    reports[partner_id] = reports.get(partner_id, 0) + 1
    
    if reports[partner_id] >= 3:  # –ü–æ—Å–ª–µ 3 –∂–∞–ª–æ–± –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(partner_id, "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–∑-–∑–∞ –∂–∞–ª–æ–±")
        leave_chat_by_id(partner_id)
    
    bot.send_message(user_id, "‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")
    leave_chat(message)

def forward_message(message):
    user_id = message.from_user.id
    chat_info = users[user_id]
    
    if chat_info["state"] != "chatting" or chat_info["partner_id"] not in users:
        bot.send_message(user_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç")
        users[user_id]["state"] = "none"
        return
    
    partner_id = chat_info["partner_id"]
    chat_id = chat_info["chat_id"]

    if message.content_type == 'text':
        chat_messages[chat_id].append({
            "sender": user_id,
            "type": "text",
            "content": message.text,
            "timestamp": time.time()
        })
    else:
        if message.content_type == 'photo':
            content = message.photo[-1].file_id
        elif message.content_type in ['video', 'document', 'audio', 'voice', 'sticker']:
            content = getattr(message, message.content_type).file_id
        
        chat_messages[chat_id].append({
            "sender": user_id,
            "type": message.content_type,
            "content": content,
            "timestamp": time.time()
        })

    try:
        if message.content_type == 'text':
            bot.send_message(partner_id, message.text)
        elif message.content_type == 'photo':
            bot.send_photo(partner_id, message.photo[-1].file_id)
        elif message.content_type == 'video':
            bot.send_video(partner_id, message.video.file_id)
        elif message.content_type == 'document':
            bot.send_document(partner_id, message.document.file_id)
        elif message.content_type == 'audio':
            bot.send_audio(partner_id, message.audio.file_id)
        elif message.content_type == 'voice':
            bot.send_voice(partner_id, message.voice.file_id)
        elif message.content_type == 'sticker':
            bot.send_sticker(partner_id, message.sticker.file_id)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        leave_chat_by_id(partner_id)
        bot.send_message(user_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç")
        users[user_id]["state"] = "none"

def leave_chat_by_id(user_id):
    if user_id not in users:
        return
    
    if users[user_id]["state"] == "waiting":
        if user_id in waiting_list:
            waiting_list.remove(user_id)
    elif users[user_id]["state"] == "chatting":
        partner_id = users[user_id]["partner_id"]
        if partner_id in users and users[partner_id]["state"] == "chatting":
            bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç")
            users[partner_id]["state"] = "none"
            users[partner_id]["partner_id"] = None
            users[partner_id]["chat_id"] = None
    
    users[user_id]["state"] = "none"
    users[user_id]["partner_id"] = None
    users[user_id]["chat_id"] = None

# ==============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô
# ==============================================

@bot.message_handler(commands=['start', 'help', 'find', 'leave', 'report', 'stats', 'history', 'chat_id', 'ban', 'unban'])
def handle_commands(message):
    command = message.text.split()[0].lower()
    
    if command == '/start':
        send_welcome(message)
    elif command == '/help':
        show_help(message)
    elif command == '/find':
        find_partner(message)
    elif command == '/leave':
        leave_chat(message)
    elif command == '/report':
        report_user(message)
    elif command == '/stats':
        admin_stats(message)
    elif command == '/history':
        chat_history(message)
    elif command == '/chat_id':
        get_chat_ids(message)
    elif command == '/ban':
        ban_user(message)
    elif command == '/unban':
        unban_user(message)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = message.from_user.id
    
    if user_id not in users:
        send_welcome(message)
        return
    
    if users[user_id]["state"] != "chatting":
        bot.send_message(user_id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (/help)")
        return
    
    forward_message(message)

@bot.message_handler(content_types=['photo', 'video', 'document', 'audio', 'voice', 'sticker'])
def handle_media(message):
    user_id = message.from_user.id
    
    if user_id not in users or users[user_id]["state"] != "chatting":
        return
    
    forward_message(message)

# ==============================================
# –ê–î–ú–ò–ù-–§–£–ù–ö–¶–ò–ò
# ==============================================

@admin_only
def unban_user(message):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É"""
    if len(message.text.split()) < 2:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unban <username>")
        return
    
    username = message.text.split()[1].lower().strip('@')
    if username in banned_users:
        banned_users.remove(username)
        bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
    else:
        bot.send_message(message.chat.id, f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")


def ban_user(message):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É"""
    if len(message.text.split()) < 2:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ban <username>")
        return
    
    username = message.text.split()[1].lower().strip('@')
    banned_users.add(username)
    for user_id, data in users.items():
        if data.get('username', '').lower() == username:
            if data['state'] == 'chatting':
                partner_id = data['partner_id']
                if partner_id in users:
                    bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                    users[partner_id]['state'] = 'none'
                    users[partner_id]['partner_id'] = None
                    users[partner_id]['chat_id'] = None
            
            bot.send_message(user_id, "üö´ –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
            users[user_id]['state'] = 'none'
            if user_id in waiting_list:
                waiting_list.remove(user_id)
    
    bot.send_message(message.chat.id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")

def admin_stats(message):
    active_users = sum(1 for u in users.values() if u["state"] in ["chatting", "waiting"])
    
    stats = [
        "‚ú® üìä –ê–¥–º–∏–Ω-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä ‚ú®",
        "",
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        f"üîç –í –ø–æ–∏—Å–∫–µ: {len(waiting_list)}",
        f"üí¨ –í –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö: {active_users - len(waiting_list)}",
        f"üìÇ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {len(chats)}",
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö: {len(banned_users)}",
        "",
        "‚ö° –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
    ]
    
    for uid, data in list(users.items())[-10:]:
        status = "üí¨ –≤ —á–∞—Ç–µ" if data["state"] == "chatting" else "üîç –≤ –ø–æ–∏—Å–∫–µ" if data["state"] == "waiting" else "üí§ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω"
        banned = " (üö´)" if data.get('username', '').lower() in banned_users else ""
        stats.append(f"üë§ {data.get('username', uid)}{banned} (ID: {uid}): {status}")
    
    bot.send_message(message.chat.id, "\n".join(stats))

@admin_only
def chat_history(message):
    if len(message.text.split()) < 2:
        bot.send_message(message.chat.id, "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /history <chat_id>")
        return
    
    chat_id = message.text.split()[1]
    
    if chat_id not in chat_messages:
        bot.send_message(message.chat.id, "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    history = [
        f"üìù –ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ {chat_id}",
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {chats[chat_id]['user1']} –∏ {chats[chat_id]['user2']}",
        f"üï∞ –°–æ–∑–¥–∞–Ω: {format_timestamp(chats[chat_id]['created_at'])}",
        "",
        "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π:",
        "======================="
    ]
    
    for msg in chat_messages[chat_id][-30:]:
        sender = users.get(msg["sender"], {}).get("username", msg["sender"])
        time_str = format_timestamp(msg["timestamp"])
        content = msg["content"] if msg["type"] == "text" else f"[{msg['type']}]"
        history.append(f"{time_str} {sender}: {content}")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    msg_text = "\n".join(history)
    for i in range(0, len(msg_text), 4096):
        bot.send_message(message.chat.id, msg_text[i:i+4096])

@admin_only
def get_chat_ids(message):
    if not chats:
        bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤")
        return
    
    chat_list = [
        "üìÇ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤:",
        "====================="
    ]
    
    for chat_id, chat_data in sorted(chats.items(), key=lambda x: x[1]['created_at'], reverse=True):
        user1 = users.get(chat_data['user1'], {}).get('username', chat_data['user1'])
        user2 = users.get(chat_data['user2'], {}).get('username', chat_data['user2'])
        chat_list.append(
            f"üÜî {chat_id}\n"
            f"üë§ –£—á–∞—Å—Ç–Ω–∏–∫–∏: {user1} –∏ {user2}\n"
            f"üï∞ {format_timestamp(chat_data['created_at'])}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {len(chat_messages.get(chat_id, []))}\n"
            "-----------------------------"
        )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–∞—Ç–æ–≤ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
    msg_text = "\n".join(chat_list[:10])
    bot.send_message(message.chat.id, msg_text)

# ==============================================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# ==============================================

if __name__ == '__main__':
    print("‚ú® –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
